package com.capitanperegrina.common.sql;

import java.io.ByteArrayInputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;

import com.capitanperegrina.common.exceptions.ServicioErrorException;
import com.capitanperegrina.common.utils.Cadenas;
import com.capitanperegrina.common.utils.Fecha;

/**
 * Clase de utilidad para operaciones relacionadas con querys.
 */
public class SQLUtils 
{
	static Logger log  = Logger.getLogger( SQLUtils.class );
	
	private SQLUtils() {}

	/**
	 * Crea un prepared statement con sus parámetros cargados.
	 * @param con Conexión a la bbdd.
	 * @param query Consulta a la bbdd.
	 * @param parametros Parámetros de la query.
	 * @param autoGeneratedKeys true si deseamos que la ejecución de la query devuelva un resultset con los valores autogenerados.
	 * @return El PreparedStatement generado a partir de los parámetros anteriores.
	 * @throws SQLException Si se produce alguna excepción en el procesado de query o parámetros.
	 */
	public static PreparedStatement cargaVariables( Connection c, StringBuilder query, Object[] parametros, Integer autoGeneratedKeys ) throws SQLException
	{
		return cargaVariables( c, query.toString(), Arrays.asList( parametros ), autoGeneratedKeys );
	}

	/**
	 * Crea un prepared statement con sus parámetros cargados.
	 * @param con Conexión a la bbdd.
	 * @param query Consulta a la bbdd.
	 * @param parametros Parámetros de la query.
	 * @param autoGeneratedKeys true si deseamos que la ejecución de la query devuelva un resultset con los valores autogenerados.
	 * @return El PreparedStatement generado a partir de los parámetros anteriores.
	 * @throws SQLException Si se produce alguna excepción en el procesado de query o parámetros.
	 */
	public static PreparedStatement cargaVariables( Connection c, StringBuilder q, List<Object> p ) throws SQLException
	{
		return cargaVariables( c, q.toString(), p, null );
	}
	
	/**
	 * Crea un prepared statement con sus parámetros cargados.
	 * @param con Conexión a la bbdd.
	 * @param query Consulta a la bbdd.
	 * @param parametros Parámetros de la query.
	 * @param autoGeneratedKeys true si deseamos que la ejecución de la query devuelva un resultset con los valores autogenerados.
	 * @return El PreparedStatement generado a partir de los parámetros anteriores.
	 * @throws SQLException Si se produce alguna excepción en el procesado de query o parámetros.
	 */
	public static PreparedStatement cargaVariables( Connection c, String query, List<Object> parametros, Integer autoGeneratedKeys ) throws SQLException
	{
		try
		{
			PreparedStatement ps;
			if ( autoGeneratedKeys != null )
			{
				ps = c.prepareStatement( query, autoGeneratedKeys );	
			}
			else
			{
				ps = c.prepareStatement( query );
			}
			
			for ( int i=0 ; i < parametros.size() ; i++ )
			{
				if ( parametros.get( i ) == null )
				{
					ps.setNull( i+1 , Types.NULL );
				}
				else if ( parametros.get( i ) instanceof String )
		    	{
		    		ps.setString( i+1, (String) parametros.get( i ) );
		    	}
		    	else if ( parametros.get( i ) instanceof Integer )
		    	{
		    		ps.setInt( i+1, (Integer) parametros.get( i ) );
		    	}
		    	else if ( parametros.get( i ) instanceof Calendar )
		    	{
		    		ps.setTimestamp( i+1, Fecha.calendar2bbdd( (Calendar ) parametros.get( i ) ) );
		    	}
		    	else if ( parametros.get( i ) instanceof BigDecimal )
		    	{
		    		ps.setBigDecimal( i+1, (BigDecimal) parametros.get( i ) );
		    	}
		    	else if ( parametros.get( i ) instanceof byte[] )
		    	{
		    		int longitud = ( (byte[]) parametros.get( i ) ).length;

		    		if ( longitud > 0 )
		    		{
		    			ps.setBinaryStream( i+1 , new ByteArrayInputStream( (byte[]) parametros.get( i ) ), longitud  );	
		    		}
					else
					{
						ps.setNull( i+1 , Types.BLOB );
					}
		    	}
		    	else
		    	{
		    		throw new SQLException( "Tipo de dato no reconocido" );
		    	}			
			}
			return ps;
		}
		catch ( SQLException e )
		{
			log.error( "Error generando el preparedStatement", e );
			throw e;
		}
	}
	
    /**
     * Cierra un <code>ResultSet</code>.
     * @param rs ResultSet a cerrar
     */
    public static void closeResultSet(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                log.error( "", e );
                throw new ServicioErrorException(e);
            }
        }
    }

    /**
     * Cierra un <code>Statement</code>
     * @param st - Statement a cerrar
     */
    public static void closeStatement(Statement st) {
        if (st != null) {
            try {
                st.close();
            } catch (SQLException e) {
                log.error( "", e );
                throw new ServicioErrorException(e);
            }
        }
    }
    
    public static void dropTemporaryTables( JdbcTemplate jdbcTemplate, List<String> tablas ) {
    	for ( String tabla : tablas ) {
    		StringBuilder q = new StringBuilder();
    		q.append("DROP TABLE ").append(tabla).append("; \n");
			if ( log.isDebugEnabled() ) {
				log.trace(Cadenas.generaQuery(q, new Object[] {}));
			}
			jdbcTemplate.update(q.toString());
    	}
    }
}

